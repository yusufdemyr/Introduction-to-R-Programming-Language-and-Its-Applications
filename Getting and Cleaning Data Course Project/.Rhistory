d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
swirl()
swirl()
library(swirl)
swirl()
t2 <- as.POSIXlt(Sys.time())
class(t2)
unclass(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(),t1,units='days')
library("swirl")
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
exit
exit()
q()
iris
sapply(iris$Species)
sapply(iris$Species, iris$Sepal.Length, mean)
sapply(iris$Sepal.Length, mean)
iris[iris$Species]
iris[iris$Species %like% "osa", ]
g <- grep(iris, virginica)
g <- grep(iris, 'virginica)
}
''
g <- grep(iris, 'virginica')
g <- grep('virginica', iris)
g
length(g)
grepl('virginica', iris)
g <- grepl('virginica', iris)
g
iris[g]
iris[[g]]
data.frame(iris[g])
iris[g]
# if you don't have data.table installed
# install.packages("data.table")
library(data.table)
iris_dt <- as.data.table(iris)
iris_dt[Species == "virginica",round(mean(Sepal.Length)) ]
iris
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
library(data.sets)
library(datasets)
data(mtcars)
mtcars
split(mtcars, mtcars$cyl)
sapply(mtcars, cyl, mean)
apply(mtcars, 2, mean)
sapply(split(mtcars$mpg, mtcars$cyl, mean))
tapply(mtcars$mpg, mtcars$cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
lapply(mtcars, mean)
tapply(mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
with(mtcars, tapply(mpg, cyl, mean))
a <- with(mtcars, tapply(mpg, cyl, mean))
a[1]
a[1] - a[3]
tcars_dt <- as.data.table(mtcars)
mtcars_dt <- mtcars_dt[,  .(mean_cols = mean(hp)), by = cyl]
round(abs(mtcars_dt[cyl == 4, mean_cols] - mtcars_dt[cyl == 8, mean_cols]))
mtcars_dt <- as.data.table(mtcars)
mtcars_dt <- mtcars_dt[, .(mean_cols = mean(hp)), by = cyl]
mtcars_dt
round(abs(mtcars_dt[cyl == 4, mean_cols] - mtcars_dt[cyl == 8 , mean_cols]))
mtcars_dt[, .]
mtcars_dt
mtcars_dt[, .(mean_cols == mean(hp))]
mtcars_dt <- as.data.table(mtcars)
mtcars_dt
debug(ls)
round(abs(mtcars_dt[cyl == 4, mean_cols] - mtcars_dt[cyl == 8 , mean_cols]))
mtcars_dt <- mtcars_dt[, .(mean_cols = mean(hp)), by = cyl]
round(abs(mtcars_dt[cyl == 4, mean_cols] - mtcars_dt[cyl == 8 , mean_cols]))
debug(ls)
debug(Is)
debug(ls)
q
q(9)
q()
sadpğaodopasdü
ü
,,,,,
iris
iris
apply(iris, 2)
apply(iris, 2, mean)
debug(ls)
,
i
i
iris
apply(iris, 2, mean)
mean(iris$Sepal.Length, by = 'v')
round(mean(iris$Sepal.Length))
apply(iris[, 1:4], 2, mean)
?<<-
??<<-
q()
library(swril)
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace=TRUE)
sample(1:6,4,replace=TRUE)
sample(1:20,10)
letters
LETTERS
sample(LETTERS)
sample(c(0,1),100,prob = (c(0.3,0.7)))
sample(c(0,1),100,replacement=TRUE,prob = (c(0.3,0.7)))
sample(c(0,1),100,rep=TRUE,prob = (c(0.3,0.7)))
flips <- sample(c(0,1),100,rep=TRUE,prob = (c(0.3,0.7)))
flips
flips <- sample(c(0,1),100,replace = TRUE,prob = (c(0.3,0.7)))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 100, prob = 0.7)
flips2 <- rbinom(1,100, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(100,25)
rnorm(10,100,25)
rpois(5,10)
replicate(100,rpois(5,10))
my_pois replicate(100,rpois(5,10))
my_pois <- replicate(100,rpois(5,10))
my_poist
my_pois
cm <- colMean(my_pois)
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(cars,x,y)
plot(cars)
plot(x = cars$speed,y = cars$dist)
plot()
plot(x = cars$dist,y = cars$speed)
plot('Speed' = cars$dist,y = cars$speed)
plot(x = 'Speed',y = cars$speed)
plot(x = cars$speed,y = cars$dist,'Speed')
plot(x = cars$speed,y = cars$dist,xlab = 'Speed')
plot(x = cars$speed,y = cars$dist,xlab = 'Speed',ylab = 'Stopping Distance')
plot(x = cars$speed,y = cars$dist,ylab = 'Stopping Distance')
plot(x = cars$speed,y = cars$dist,xlab = 'Speed',ylab = 'Stopping Distance')
plot(x = cars$speed,y = cars$dist,xlab = 'Speed',ylab = 'Stopping Distance', 'My Plot')
plot(x = cars$speed,y = cars$dist,xlab = 'Speed',ylab = 'Stopping Distance', main = 'My Plot')
plot(cars, main = 'My Plot')
plot(cars, main = 'My Plot',sub = 'My Plot Subtitle')
plot(cars, sub = 'My Plot Subtitle')
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
plot(cars)
plot(cars, pch = 2)
data(mtcars)
boxplot(mtcars)
?boxplot
boxplot(mpg ~ cyl, data = mtcars)
hist()
hist(mtcars)
hist(mtcars$mpg)
packageVersion("swirl")
install_from_swirl("Getting and Cleaning Data")
library("swirl")
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
tbl_df
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, r_arch:country, reverse = TRUE)
select()
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time())
select(cran, -time
)
-5:20
-(5:20)
select(X:size)
select()
select(-5:20)
select(5:20)
-select(cran,-time)
select(cran,time)
select(cran,-(X:size))
filter(cran, package == 'swirl')
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version == "3.1.2", country == "IN")
filter(cran, r_version <= "3.1.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, >100500, r_os = "linux-gnu")
filter(cran, > 100500, r_os = "linux-gnu")
filter(cran, col() > 100500, r_os = "linux-gnu")
filter(cran, col() > 100500, r_os == "linux-gnu")
filter(cran, X > 100500, r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na())
filter(cran, !is.na(size))
filter(cran, !is.na(r_version))
select(cran2, arrange(ip_id))
select(cran2, arrange("ip_id"))
select(cran2, arrange())
cran2 <- select()
cran2 <- select(cran, arrange("ip_id"))
arrange()
arrange(cran2, ip_id)
select(cran2, size:ip_id)
select(cran, size:ip_id)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10, correct_size = size_mb < 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(swirl)
swirl()
read.csv(path2csv, stringAsFactor = FALSE)
mydf <- read.csv(path2csv, stringAsFactor = FALSE)
mydf <- read.csv(path2csv, stringsAsFactor = FALSE)
mydf <- read.csv(path2csv, stringsAsFactor = FALSE)
mydf <- read.csv(path2csv, stringsAsFactor = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydt)
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch
)
cran
select(cran, -tim)
select(cran, -time)
select(cran, X:size)
select(cran, -X:size)
select(cran, -(X:size))
-5:20
select(cran, -(X:size))
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, X > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,1))
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, ip_id)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10, correct_size = size)
mutate(cran3, corret_size = size + 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
tbl_df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
group_by(cran, package)
?group_by
by_package(cran)
by_package
by_package <- group_by(cran, package)
by_package
summarize(by_package)
summarize(by_package, mean(size))
submit
submit()
submit()
submit
submit()
tbl
pack_sum
quantile(pack_sum$count, probs = 0,99)
count <- quantile(pack_sum$count, probs = 0,99)
library(swirl)
swirl()
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, count)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
filter(pack_sum, unique >= 465)
top_unique <- filter(pack_sum, unique >= 465)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
view(top_unique_sorted)
View(top_unique_sorted)
submit()
submit()
?chain
??chain
submit()
View(result3)
submit()
submit()
submit
submit()
submit)=
submit)=
submit)=
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
chain()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, value)
res <- gather(students2, sex_class, count, -grade)
res
?sepera
?seperate
?separate
separate(data = res, col = sex_class, into = c("sex", class))
separate(data = res, col = sex_class, into = c("sex", "class"))
submit()
students3
submit()
?spread
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(readr)
parse_number("class5")
submit()
submit()
submit()
submit()
?parse_number
submit()
submit()
submit(9)
submit()
submit()
submit()
submit(9)
submit()
submit()
submit()
submit()
students4
submit()
submit()
submit()
submit()
submit()
gradebook
passed
failed
mutate(passed, status = "passed")
passed <- passed %>% mutate(status = "passed")
passed
failed <- failed %>% mutate(status = "failed")
bind_rows(passed, failed)
sat
submit()
submit()
submit()
submit()
?separate
submit()
submit()
submit()
submit()
submit()
Sys.setlocale(category = "LC_ALL", locale = "English_United States.1252")
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
Sys.getlocale("LC_TIME")
setwd("C:\\Users\\islam\\Desktop\\R\\ProgrammingAssignment")
getwd()
